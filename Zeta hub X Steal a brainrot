-- Anti-Kick and Crash Protection
pcall(function()
    local mt = getrawmetatable(game)
    if setreadonly then setreadonly(mt, false) end

    local oldNamecall = mt.__namecall 
    local oldIndex = mt.__index 
    
    mt.__namecall = newcclosure(function(self, ...) 
        local method = getnamecallmethod() 
        if tostring(method):lower() == "kick" then 
            warn("Kick attempt blocked via __namecall") 
            return nil 
        end 
        return oldNamecall(self, ...) 
    end) 
    
    mt.__index = newcclosure(function(self, key) 
        if tostring(key):lower() == "kick" then 
            warn("Kick attempt blocked via __index") 
            return function() end 
        end 
        return oldIndex(self, key) 
    end) 
    
    local lp = game:GetService("Players").LocalPlayer 
    lp.Kick = function() 
        warn("Kick attempt blocked directly") 
        return nil 
    end 
    
    if setreadonly then setreadonly(mt, true) end 
end)

-- RedzLib load
local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/tbao143/Library-ui/refs/heads/main/Redzhubui"))()

-- Window setup
local Window = redzlib:MakeWindow({
    Title = "Zeta Hub X Steal a brainrot",
    SubTitle = "by S I L E N T",
    SaveFolder = "ZetaHubUniversal"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://100006760882280", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(0, 6) },
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

-- Player references
local LocalPlayer = Players.LocalPlayer
local character, humanoid
local markedLocation = nil
local baseBlockLocation = nil

-- Update character reference
local function updateReferences()
    character = LocalPlayer.Character
    humanoid = character and character:FindFirstChildOfClass("Humanoid") or nil
end

LocalPlayer.CharacterAdded:Connect(updateReferences)
LocalPlayer.CharacterRemoving:Connect(function()
    character = nil
    humanoid = nil
end)

updateReferences()

-- Discord Tab
local TabDiscord = Window:MakeTab({
    Title = "Discord",
    Icon = "rbxassetid://84198990394879"
})

TabDiscord:AddSection("Discord")

TabDiscord:AddDiscordInvite({
    Name = "Zeta Hub",
    Description = "Join the community",
    Logo = "rbxassetid://88800066762467",
    Invite = "https://discord.gg/pzrtAEDBbt"
})

-- Security Tab
local TabSecurity = Window:MakeTab({
    Title = "Security",
    Icon = "rbxassetid://7072718262"
})

TabSecurity:AddSection("Base Tools")

-- Mark base block location (classic system)
TabSecurity:AddButton({
    Title = "Mark Base Block Location",
    Description = "Save your current position as a base block reference",
    Callback = function()
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp then
            baseBlockLocation = hrp.Position
            print("Base block location marked at:", baseBlockLocation)
        else
            warn("HumanoidRootPart not found")
        end
    end
})

-- Instant teleport to marked base block
TabSecurity:AddButton({
    Title = "Teleport to Base Block",
    Description = "Teleport instantly to the saved base block location",
    Callback = function()
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if not hrp then
            warn("HumanoidRootPart not found")
            return
        end

        if not baseBlockLocation then 
            warn("No base block location has been marked") 
            return 
        end

        hrp.CFrame = CFrame.new(baseBlockLocation)
        print("Teleported to base block location")
    end
})

-- Detect current 'X Side' base and teleport to its PlotBlock
TabSecurity:AddButton({
    Title = "Teleport to Your Side Base",
    Description = "Teleport to the PlotBlock of the 'X Side' base you're currently inside",
    Callback = function()
        local function isCharacterReady()
            return character and character:FindFirstChild("HumanoidRootPart")
        end

        if not isCharacterReady() then
            repeat task.wait() until isCharacterReady()
        end

        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then
            warn("HumanoidRootPart not found")
            return
        end

        local sideModel = nil
        for _, base in pairs(workspace:GetChildren()) do
            if base:IsA("Model") and base.Name:match("^%d+ Side$") then
                if character:IsDescendantOf(base) then
                    sideModel = base
                    break
                end
            end
        end

        if not sideModel then
            warn("Could not detect which 'Side' base you're in")
            return
        end

        local plotBlock = sideModel:FindFirstChild("PlotBlock", true)
        if not plotBlock or not plotBlock:IsA("BasePart") then
            warn("PlotBlock not found in " .. sideModel.Name)
            return
        end

        hrp.CFrame = plotBlock.CFrame + Vector3.new(0, 5, 0)
        print("Teleported to PlotBlock in base:", sideModel.Name)
    end
})

-- Main Tab
local TabMain = Window:MakeTab({
    Title = "Main",
    Icon = "rbxassetid://106319096400681"
})

TabMain:AddSection("Movement")

-- Mark a custom location
TabMain:AddButton({
    Title = "Mark Location",
    Description = "Saves your current position for teleport",
    Callback = function()
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp then
            markedLocation = hrp.Position
            print("Location marked at:", markedLocation)
        else
            warn("HumanoidRootPart not found")
        end
    end
})

-- Tween teleport with immunity, invisibility and wall bypass
TabMain:AddButton({
    Title = "Tween Teleport to Marked Location",
    Description = "Smooth teleport with wall pass and immunity",
    Callback = function()
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")
        if not hrp or not humanoid then
            warn("HumanoidRootPart or Humanoid not found")
            return
        end

        if not markedLocation then
            warn("No location has been marked")
            return
        end
        
        local originalHealth = humanoid.Health 
        local immune = true 
        local healthConnection 
        healthConnection = humanoid:GetPropertyChangedSignal("Health"):Connect(function() 
            if immune and humanoid.Health < originalHealth then 
                humanoid.Health = originalHealth 
            end 
        end) 
        
        local affectedParts = {} 
        for _, part in pairs(character:GetDescendants()) do 
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then 
                table.insert(affectedParts, {part = part, transparency = part.Transparency, collide = part.CanCollide}) 
                part.Transparency = 1 
                part.CanCollide = false 
            elseif part:IsA("Decal") then 
                part.Transparency = 1 
            end 
        end 
        
        local wallNames = {"Wall", "BaseWall", "Barrier", "Parade", "WallPart", "BaseWallPart"} 
        local removedWalls = {} 
        for _, obj in pairs(workspace:GetDescendants()) do 
            if obj:IsA("BasePart") then 
                for _, name in pairs(wallNames) do 
                    if obj.Name:lower():find(name:lower()) then 
                        table.insert(removedWalls, { part = obj, transparency = obj.Transparency, collide = obj.CanCollide }) 
                        obj.Transparency = 1 
                        obj.CanCollide = false 
                    end 
                end 
            end 
        end 
        
        local distance = (hrp.Position - markedLocation).Magnitude 
        local tweenInfo = TweenInfo.new(distance / 40, Enum.EasingStyle.Linear) 
        local tween = TweenService:Create( 
            hrp, 
            tweenInfo, 
            {CFrame = CFrame.new(markedLocation + Vector3.new(0, 3, 0))} 
        ) 
        tween:Play() 
        
        tween.Completed:Connect(function() 
            immune = false 
            if healthConnection then healthConnection:Disconnect() end 
            
            for _, data in pairs(affectedParts) do 
                if data.part then 
                    data.part.Transparency = data.transparency 
                    data.part.CanCollide = data.collide 
                end 
            end
            
            for _, data in pairs(removedWalls) do 
                if data.part then 
                    data.part.Transparency = data.transparency 
                    data.part.CanCollide = data.collide 
                end 
            end
        end)
    end
})
